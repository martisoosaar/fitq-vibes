generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserFollow {
  id          Int      @id @default(autoincrement())
  followerId  Int // The user who is following
  followingId Int // The user being followed
  status      String   @default("active") // active, pending (for non-trainers), blocked
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("user_follows")
}

model UserNotification {
  id        Int       @id @default(autoincrement())
  userId    Int // User who receives the notification
  type      String // follow_request, follow_accepted, new_follower, etc.
  title     String
  message   String    @db.Text
  data      Json? // Additional data like followerId, videoId, etc.
  isRead    Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@map("user_notifications")
}

model User {
  id                                Int                  @id @default(autoincrement())
  email                             String               @unique
  name                              String?
  createdAt                         DateTime             @default(now())
  updatedAt                         DateTime             @updatedAt
  deletedAt                         DateTime?            @map("deleted_at")
  agoraId                           String?
  avatar                            String?              @default("users/default.png")
  biographyImage                    String?              @db.Text
  birthday                          DateTime?
  commentEmailNotifications         Int                  @default(1) @db.TinyInt
  country                           String?              @db.Text
  displayOnTrainersList             Int                  @default(0) @db.TinyInt
  emailVerifiedAt                   DateTime?
  externalAvatar                    String?              @db.Text
  facebookId                        String?
  feePercentage                     Int?                 @default(0)
  getresponseTags                   String?
  googleId                          String?
  gymwolfSession                    String?
  height                            Int?
  hideNameFromLeaderboards          Int?                 @db.TinyInt
  languageId                        Int?                 @default(1)
  lastLogin                         DateTime?
  linkOgImage                       String?
  monthlyNews                       Int                  @default(1) @db.SmallInt
  notifications                     String?              @db.Text
  profileDesc                       String?              @db.Text
  profilePic                        String?              @db.Text
  programUnitInfoEmailNotifications Int                  @default(1) @db.TinyInt
  rememberToken                     String?              @db.Text
  roleId                            Int?
  sex                               String?
  showIntro                         Int?                 @default(1) @db.TinyInt
  simpleLink                        String?
  sportIdAssessToken                String?              @db.Text
  sportIdEmail                      String?
  sportIdId                         String?
  sportIdRefreshToken               String?              @db.Text
  timezone                          String?
  totalVideoViews                   Int                  @default(0)
  trainerChannelImage               String?
  trainerIframeIntro                String?              @db.Text
  trainerNotification               String?              @db.Text
  trainerUnlocked                   Int?                 @db.TinyInt @map("trainer_unlocked")
  trainerWelcomeDesc                String?              @db.Text
  trainerWelcomeTitle               String?
  trialEnd                          Int?                 @db.SmallInt
  userCredit                        Float                @default(0)
  userFirstBuy                      Int                  @default(0) @db.TinyInt
  userInvitedBy                     Int                  @default(0)
  userLanguage                      Int?
  utmData                           String?              @db.Text
  wallet                            Decimal              @default(0.00000) @db.Decimal(10, 5)
  weeklyNews                        Int                  @default(1) @db.SmallInt
  weight                            Int?
  isAdmin                           Boolean              @default(false)
  sessions                          DeviceSession[]
  tokens                            RefreshToken[]
  videos                            Video[]
  videoViews                        VideoView[]
  videoComments                     VideoComment[]
  videoCommentLikes                 VideoCommentLike[]
  trainedVideos                     VideoTrainer[]       @relation("TrainerVideos")
  followers                         UserFollow[]         @relation("UserFollowing")
  following                         UserFollow[]         @relation("UserFollowers")
  userNotifications                 UserNotification[]
  challenges                        Challenge[]
  trainerPrograms                   TrainerProgram[]     @relation("TrainerPrograms")
  programUsers                      TrainerProgramUser[] @relation("ProgramUsers")
  adminImpersonations               ImpersonationToken[] @relation("AdminTokens")
  impersonatedSessions              ImpersonationToken[] @relation("ImpersonatedTokens")
}

model LoginCode {
  id          Int       @id @default(autoincrement())
  email       String
  challengeId String    @unique
  codeHash    String
  expiresAt   DateTime
  attempts    Int       @default(0)
  maxAttempts Int       @default(5)
  consumedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model DeviceSession {
  id         Int            @id @default(autoincrement())
  userId     Int
  deviceName String?
  ip         String?
  ua         String?
  lastUsedAt DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokens     RefreshToken[]

  @@index([userId], map: "DeviceSession_userId_fkey")
}

model RefreshToken {
  id              Int           @id @default(autoincrement())
  userId          Int
  deviceSessionId Int
  tokenHash       String        @unique
  revokedAt       DateTime?
  expiresAt       DateTime
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deviceSession   DeviceSession @relation(fields: [deviceSessionId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([deviceSessionId], map: "RefreshToken_deviceSessionId_fkey")
  @@index([userId], map: "RefreshToken_userId_fkey")
}

model Trainer {
  id            Int         @id @default(autoincrement())
  slug          String      @unique
  name          String
  avatar        String?
  videosCount   Int         @default(0)
  videoViews    Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  programs      Program[]
  videos        Video[]
  videoViewsLog VideoView[]
}

model Language {
  id             Int       @id @default(autoincrement())
  languageName   String
  languageNative String?
  languageAbbr   String    @unique
  languageFlag   String?
  createdAt      DateTime? @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  videos         Video[]
}

model VideoCategory {
  id        Int       @id @default(autoincrement())
  name      String    @unique(map: "name")
  image     String?   @db.VarChar(255)
  createdAt DateTime? @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  videos    Video[]
}

model VideoTrainer {
  id        Int       @id @default(autoincrement())
  videoId   Int
  trainerId Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  video   Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
  trainer User  @relation("TrainerVideos", fields: [trainerId], references: [id], onDelete: Cascade)

  @@index([videoId])
  @@index([trainerId])
  @@map("video_trainers")
}

model Video {
  id                   Int                               @id @default(autoincrement())
  userId               Int
  title                String                            @db.Text
  description          String                            @db.Text
  duration             Int
  categoryId           Int
  languageId           Int?
  equipment            String?                           @db.Text
  energyConsumption    Int?                              @default(0)
  keywords             String?                           @db.Text
  live                 Boolean?                          @default(false)
  onDemand             Boolean?                          @default(true)
  recommend            Int?                              @db.TinyInt
  startTime            DateTime?                         @db.DateTime(0)
  endTime              DateTime?                         @db.DateTime(0)
  availableFrom        DateTime?                         @db.DateTime(0)
  availableUntil       DateTime?                         @db.DateTime(0)
  openForSubscribers   Boolean?                          @default(false)
  openForTickets       Boolean?                          @default(false)
  openForFree          Boolean?                          @default(false)
  singleTicketPrice    Float?                            @default(0) @db.Float
  iframe               String?                           @db.Text
  videoPreview         String?                           @db.Text
  videoPreviewExternal String?                           @db.Text
  videoLanguage        String?                           @db.VarChar(255)
  videoPlatform        String?                           @db.Text
  playbackUrl          String?                           @db.Text
  vimeoId              String?                           @db.VarChar(255)
  recordId             String?                           @db.VarChar(255)
  hidden               Boolean?                          @default(false)
  hiddenHash           String?                           @db.VarChar(255)
  videoDeleted         Boolean?                          @default(false)
  unlisted             String?                           @db.VarChar(255)
  reportedBad          Boolean?                          @default(false)
  videoTest            Boolean?                          @default(false)
  videoForChallenge    Int?                              @default(0)
  views                Int?                              @default(0)
  trainerId            Int?
  createdAt            DateTime?                         @default(now())
  updatedAt            DateTime                          @default(now()) @updatedAt
  deletedAt            DateTime?                         @map("deleted_at")
  user                 User                              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "video_ibfk_1")
  category             VideoCategory                     @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "video_ibfk_2")
  trainer              Trainer?                          @relation(fields: [trainerId], references: [id], onUpdate: NoAction, map: "video_ibfk_3")
  language             Language?                         @relation(fields: [languageId], references: [id], onUpdate: NoAction, map: "video_ibfk_4")
  viewsLog             VideoView[]
  comments             VideoComment[]
  trainers             VideoTrainer[]
  musicCopyrights      VideoMusicCopyright[]
  programUnitMaterials TrainerProgramUnitVideoMaterial[]
  programVideoTasks    TrainerProgramUnitVideoTask[]     @relation("ProgramVideoTasks")
  programIntros        TrainerProgram[]                   @relation("ProgramIntroVideos")

  @@index([categoryId], map: "categoryId")
  @@index([trainerId], map: "trainerId")
  @@index([userId], map: "userId")
  @@index([languageId], map: "languageId")
}

model VideoView {
  id                    Int      @id @default(autoincrement())
  videoId               Int
  userId                Int
  trainerId             Int?
  watchTimeSeconds      Int
  caloriesBurned        Int?
  paid                  Boolean  @default(false)
  userCash              Float    @default(0.000)
  trainerCash           Float    @default(0.000)
  currentlyWatchingLive Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  video   Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainer Trainer? @relation(fields: [trainerId], references: [id], onDelete: SetNull)

  @@index([videoId], map: "videoId")
  @@index([userId], map: "userId")
  @@index([trainerId], map: "trainerId")
}

model ImpersonationToken {
  id             Int      @id @default(autoincrement())
  token          String   @unique @db.VarChar(255)
  adminId        Int      @map("admin_id")
  impersonatedId Int      @map("impersonated_id")
  expiresAt      DateTime @map("expires_at")
  usedAt         DateTime? @map("used_at")
  createdAt      DateTime @default(now()) @map("created_at")

  admin        User @relation("AdminTokens", fields: [adminId], references: [id], onDelete: Cascade)
  impersonated User @relation("ImpersonatedTokens", fields: [impersonatedId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([adminId])
  @@index([impersonatedId])
  @@map("impersonation_tokens")
}

model VideoMusicCopyright {
  id        Int       @id @default(autoincrement())
  videoId   Int       @map("video_id")
  title     String    @db.VarChar(128)
  artist    String    @db.VarChar(128)
  data      String?   @db.Text
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId])
  @@map("video_music_copyrights")
}

model VideoComment {
  id        Int       @id @default(autoincrement())
  videoId   Int
  userId    Int
  parentId  Int?
  content   String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  video   Video              @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user    User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent  VideoComment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies VideoComment[]     @relation("CommentReplies")
  likes   VideoCommentLike[]

  @@index([videoId], map: "VideoComment_videoId_fkey")
  @@index([userId], map: "VideoComment_userId_fkey")
  @@index([parentId], map: "VideoComment_parentId_fkey")
}

model VideoCommentLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment VideoComment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@index([commentId], map: "VideoCommentLike_commentId_fkey")
  @@index([userId], map: "VideoCommentLike_userId_fkey")
}

model Program {
  id               Int      @id @default(autoincrement())
  hashId           String   @unique
  title            String
  shortDescription String
  picture          String
  urlSlug          String   @unique
  trainerId        Int
  unitsCount       Int      @default(0)
  canAccess        Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  trainer          Trainer  @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@index([trainerId], map: "Program_trainerId_fkey")
}

model Challenge {
  id                   Int       @id @default(autoincrement())
  name                 String?   @db.VarChar(255)
  description          String?   @db.Text
  image                String    @db.VarChar(500)
  content              String    @db.Text
  slides               String    @db.Text
  includes             String    @db.Text
  commune              String    @db.Text
  type                 String?   @db.VarChar(255)
  isSubscriptionNeeded Int       @default(0) @db.TinyInt
  path                 String?   @db.VarChar(255)
  beginDate            DateTime? @db.Timestamp(0)
  endDate              DateTime? @db.Timestamp(0)
  userId               Int?
  minTeam              Int?
  maxTeam              Int?
  challengeVisible     Int       @default(1) @db.TinyInt
  createdAt            DateTime? @db.Timestamp(0)
  updatedAt            DateTime  @default(now()) @updatedAt
  deletedAt            DateTime? @db.Timestamp(0)

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([challengeVisible])
  @@map("challenges")
}

model TrainerProgram {
  id               BigInt    @id @default(autoincrement())
  trainerId        Int
  title            String    @db.VarChar(255)
  shortDescription String    @db.Text
  description      String    @db.Text
  picture          String?   @db.VarChar(500)
  urlSlug          String?   @db.VarChar(255)
  faq              String?   @db.Text
  unitLength       String    @default("DAY") @db.VarChar(16)
  unitVisibility   String    @default("VISIBLE_AFTER_PREVIOUS") @db.VarChar(255)
  languageId       Int       @db.TinyInt
  status           String    @default("DRAFT") @db.VarChar(16)
  commentsEnabled  Boolean   @default(false)
  feedbackEnabled  Boolean   @default(false)
  introVideoId     Int?      @map("intro_video_id")
  createdAt        DateTime? @db.Timestamp(0)
  updatedAt        DateTime? @db.Timestamp(0)
  deletedAt        DateTime? @db.Timestamp(0)

  trainer    User                 @relation("TrainerPrograms", fields: [trainerId], references: [id])
  introVideo Video?               @relation("ProgramIntroVideos", fields: [introVideoId], references: [id])
  units      TrainerProgramUnit[]
  users      TrainerProgramUser[]

  @@index([trainerId])
  @@index([status])
  @@index([introVideoId])
  @@map("trainer_programs")
}

model TrainerProgramUnit {
  id          BigInt    @id @default(autoincrement())
  programId   BigInt
  order       Int?
  title       String    @db.VarChar(255)
  description String?   @db.Text
  status      String    @default("DRAFT") @db.VarChar(255)
  createdAt   DateTime? @db.Timestamp(0)
  updatedAt   DateTime? @db.Timestamp(0)
  deletedAt   DateTime? @db.Timestamp(0)

  program        TrainerProgram                          @relation(fields: [programId], references: [id])
  videoMaterials TrainerProgramUnitVideoMaterial[]
  textTasks      TrainerProgramUnitTextTask[]
  videoTasks     TrainerProgramUnitVideoTask[]
  files          TrainerProgramUnitFile[]
  workoutTasks   TrainerProgramUnitWorkoutTemplateTask[]
  cardioTasks    TrainerProgramUnitCardioTemplateTask[]
  unitsDone      TrainerProgramUserUnitDone[]

  @@index([programId])
  @@map("trainer_program_units")
}

model TrainerProgramUnitVideoMaterial {
  id        BigInt    @id @default(autoincrement())
  unitId    BigInt
  videoId   Int
  createdAt DateTime? @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
  deletedAt DateTime? @db.Timestamp(0)

  unit  TrainerProgramUnit @relation(fields: [unitId], references: [id])
  video Video              @relation(fields: [videoId], references: [id])

  @@index([unitId])
  @@index([videoId])
  @@map("trainer_program_unit_video_materials")
}

model TrainerProgramUnitTextTask {
  id          BigInt    @id @default(autoincrement())
  unitId      BigInt
  order       Int?
  title       String    @db.VarChar(255)
  description String?   @db.Text
  createdAt   DateTime? @db.Timestamp(0)
  updatedAt   DateTime? @db.Timestamp(0)
  deletedAt   DateTime? @db.Timestamp(0)

  unit      TrainerProgramUnit           @relation(fields: [unitId], references: [id])
  tasksDone TrainerProgramUserTaskDone[]

  @@index([unitId])
  @@map("trainer_program_unit_text_tasks")
}

model TrainerProgramUnitVideoTask {
  id        BigInt    @id @default(autoincrement())
  unitId    BigInt
  videoId   Int
  order     Int?
  createdAt DateTime? @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
  deletedAt DateTime? @db.Timestamp(0)

  unit      TrainerProgramUnit           @relation(fields: [unitId], references: [id])
  video     Video                        @relation("ProgramVideoTasks", fields: [videoId], references: [id])
  tasksDone TrainerProgramUserTaskDone[]

  @@index([unitId])
  @@index([videoId])
  @@map("trainer_program_unit_video_tasks")
}

model TrainerProgramUnitFile {
  id        BigInt    @id @default(autoincrement())
  unitId    BigInt
  order     Int?
  title     String    @db.VarChar(255)
  file      String    @db.VarChar(500)
  createdAt DateTime? @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
  deletedAt DateTime? @db.Timestamp(0)

  unit TrainerProgramUnit @relation(fields: [unitId], references: [id])

  @@index([unitId])
  @@map("trainer_program_unit_files")
}

model TrainerProgramUnitWorkoutTemplateTask {
  id                BigInt    @id @default(autoincrement())
  unitId            BigInt
  order             Int?
  title             String    @db.VarChar(255)
  workoutTemplateId Int
  createdAt         DateTime? @db.Timestamp(0)
  updatedAt         DateTime? @db.Timestamp(0)
  deletedAt         DateTime? @db.Timestamp(0)

  unit      TrainerProgramUnit           @relation(fields: [unitId], references: [id])
  tasksDone TrainerProgramUserTaskDone[]

  @@index([unitId])
  @@map("trainer_program_unit_workout_template_tasks")
}

model TrainerProgramUnitCardioTemplateTask {
  id               BigInt    @id @default(autoincrement())
  unitId           BigInt
  order            Int?
  title            String    @db.VarChar(255)
  cardioTemplateId Int
  createdAt        DateTime? @db.Timestamp(0)
  updatedAt        DateTime? @db.Timestamp(0)
  deletedAt        DateTime? @db.Timestamp(0)

  unit      TrainerProgramUnit           @relation(fields: [unitId], references: [id])
  tasksDone TrainerProgramUserTaskDone[]

  @@index([unitId])
  @@map("trainer_program_unit_cardio_template_tasks")
}

model TrainerProgramUser {
  id          BigInt    @id @default(autoincrement())
  programId   BigInt
  userId      Int
  startDate   DateTime? @db.Date
  status      String    @default("ACTIVE") @db.VarChar(16)
  currentUnit Int?
  createdAt   DateTime? @db.Timestamp(0)
  updatedAt   DateTime? @db.Timestamp(0)
  deletedAt   DateTime? @db.Timestamp(0)

  program   TrainerProgram               @relation(fields: [programId], references: [id])
  user      User                         @relation("ProgramUsers", fields: [userId], references: [id])
  unitsDone TrainerProgramUserUnitDone[]
  tasksDone TrainerProgramUserTaskDone[]

  @@unique([programId, userId])
  @@index([programId])
  @@index([userId])
  @@map("trainer_program_users")
}

model TrainerProgramUserUnitDone {
  id            BigInt    @id @default(autoincrement())
  programUserId BigInt
  unitId        BigInt
  completedAt   DateTime? @db.Timestamp(0)
  createdAt     DateTime? @db.Timestamp(0)
  updatedAt     DateTime? @db.Timestamp(0)

  programUser TrainerProgramUser @relation(fields: [programUserId], references: [id])
  unit        TrainerProgramUnit @relation(fields: [unitId], references: [id])

  @@unique([programUserId, unitId])
  @@index([programUserId])
  @@index([unitId])
  @@map("trainer_program_user_unit_done")
}

model TrainerProgramUserTaskDone {
  id            BigInt    @id @default(autoincrement())
  programUserId BigInt
  taskType      String    @db.VarChar(50) // 'text', 'video', 'workout_template', 'cardio_template'
  taskId        BigInt
  workoutId     Int? // For workout templates - reference to user's workout
  completedAt   DateTime? @db.Timestamp(0)
  createdAt     DateTime? @db.Timestamp(0)
  updatedAt     DateTime? @db.Timestamp(0)

  programUser TrainerProgramUser                     @relation(fields: [programUserId], references: [id])
  textTask    TrainerProgramUnitTextTask?            @relation(fields: [taskId], references: [id], map: "trainer_program_user_tasks_done_textTaskId_fkey")
  videoTask   TrainerProgramUnitVideoTask?           @relation(fields: [taskId], references: [id], map: "trainer_program_user_tasks_done_videoTaskId_fkey")
  workoutTask TrainerProgramUnitWorkoutTemplateTask? @relation(fields: [taskId], references: [id], map: "trainer_program_user_tasks_done_workoutTaskId_fkey")
  cardioTask  TrainerProgramUnitCardioTemplateTask?  @relation(fields: [taskId], references: [id], map: "trainer_program_user_tasks_done_cardioTaskId_fkey")

  @@unique([programUserId, taskType, taskId])
  @@index([programUserId])
  @@index([taskType, taskId])
  @@map("trainer_program_user_tasks_done")
}
