openapi: 3.0.3
info:
  title: FitQ API (Modernized)
  version: 0.1.0
  description: Draft OpenAPI spec to formalize current endpoints prior to migration.
servers:
  - url: http://localhost:3000/api
    description: Local Next.js API
  - url: https://fitq.me/api
    description: Production API (current)
security:
  - cookieAuth: []
  components:
    securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: XSRF-TOKEN
  schemas:
    UserInfo:
      type: object
      properties:
        user:
          type: object
          properties:
            name: { type: string }
            email: { type: string, format: email }
            sex: { type: string, nullable: true }
            height: { type: string, nullable: true }
            avatar: { type: string }
            birthday: { type: string, nullable: true }
            invite_code: { type: string }
    Error:
      type: object
      properties:
        type: { type: string }
        title: { type: string }
        status: { type: integer }
        detail: { type: string }
        trace_id: { type: string }
    EmailCodeRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email
    EmailCodeVerify:
      type: object
      required: [challenge_id, code]
      properties:
        challenge_id: { type: string }
        code: { type: string, minLength: 6, maxLength: 6 }
        device_name: { type: string, example: 'Chrome on macOS' }
    TokenResponse:
      type: object
      properties:
        access_token: { type: string }
        token_type: { type: string, example: 'Bearer' }
        expires_in: { type: integer, example: 900 }
  parameters:
    Authorization:
      in: header
      name: Authorization
      schema: { type: string, example: 'Bearer <access-token>' }
paths:
  /auth/email-code/request:
    post:
      summary: Request one-time login code to email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailCodeRequest'
      responses:
        '200':
          description: Always 200 to avoid user enumeration
          content:
            application/json:
              schema:
                type: object
                properties:
                  challenge_id: { type: string }
        '429': { description: Too many requests }
  /auth/email-code/verify:
    post:
      summary: Verify code and issue tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailCodeVerify'
      responses:
        '200':
          description: OK; sets refresh cookie
          headers:
            Set-Cookie:
              description: HttpOnly refresh token cookie
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400': { description: Invalid or expired code }
        '429': { description: Too many attempts }
  /auth/refresh:
    post:
      summary: Refresh access token via refresh cookie
      responses:
        '200':
          description: New access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401': { description: Invalid refresh token }
  /auth/logout:
    post:
      summary: Logout current device (revoke refresh token)
      responses:
        '204': { description: No Content }
  /auth/sessions:
    get:
      summary: List active device sessions
      parameters:
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessions:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        device_name: { type: string }
                        last_used_at: { type: string, format: date-time }
                        ip: { type: string }
    delete:
      summary: Logout all sessions
      parameters:
        - $ref: '#/components/parameters/Authorization'
      responses:
        '204': { description: No Content }
  /auth/sessions/{id}:
    delete:
      summary: Revoke a specific device session
      parameters:
        - $ref: '#/components/parameters/Authorization'
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: No Content }
  /user-info:
    get:
      summary: Get current user basic info
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: Unauthenticated
  /login:
    post:
      summary: Login with email/password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, format: password }
      responses:
        '200': { description: OK }
        '422': { description: Validation error }
  /videos:
    get:
      summary: List videos
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  videos:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: integer }
                        title: { type: string }
                        duration: { type: integer }
                        image: { type: string }
                        category: { type: string }
                  page: { type: integer }
                  pages: { type: integer }
  /trainer-programs:
    get:
      summary: List trainer programs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  programs:
                    type: array
                    items:
                      type: object
                      properties:
                        hash_id: { type: string }
                        title: { type: string }
                        short_description: { type: string }
                        picture: { type: string }
                        url_slug: { type: string }
                        trainer:
                          type: object
                          properties:
                            name: { type: string }
                            slug: { type: string }
                        units_count: { type: integer }
                        can_access: { type: boolean }
